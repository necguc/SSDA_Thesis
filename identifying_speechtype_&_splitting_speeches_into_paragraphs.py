# -*- coding: utf-8 -*-
"""Identifying SpeechType & Splitting Speeches into Paragraphs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r3ABjB7JSDY-ON1cYyfA3FVud1Mf_QBE
"""

import pandas as pd

# Read the Excel file
file_path = 'all_speeches_new_variables.xlsx'
df = pd.read_excel(file_path)

# Display column names
column_names = df.columns.tolist()
print("Column Names:", column_names)

# Display count of columns
column_count = len(df.columns)
print("Number of Columns:", column_count)

import pandas as pd

# Load the provided Excel file
file_path = "Combined_Data.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file
excel_data = pd.ExcelFile(file_path)

# Create a dictionary to hold sheet names and their respective data
sheet_data = {}

# Iterate over each sheet in the Excel file
for sheet_name in excel_data.sheet_names:
    # Read the sheet into a DataFrame
    df = pd.read_excel(file_path, sheet_name=sheet_name)

    # Get column names and the number of non-null entries for each column
    column_info = df.notnull().sum().to_frame(name='Non-Null Entries').reset_index().rename(columns={'index': 'Column Name'})

    # Store the information in the dictionary
    sheet_data[sheet_name] = column_info

# Display data for each sheet
for sheet, data in sheet_data.items():
    print(f"Sheet: {sheet}")
    print(data)
    print("\n")

import pandas as pd

# Load the provided Excel file
file_path = "Combined_Data.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file
excel_data = pd.ExcelFile(file_path)

# Initialize a dictionary to hold the category counts for each sheet
speech_type_counts = {}

# Iterate over each sheet in the Excel file
for sheet_name in excel_data.sheet_names:
    # Read the sheet into a DataFrame
    df = pd.read_excel(file_path, sheet_name=sheet_name)

    # Check if the 'SpeechType' column exists in the DataFrame
    if 'SpeechType' in df.columns:
        # Get the counts of each category in the 'SpeechType' column
        category_counts = df['SpeechType'].value_counts().to_frame(name='Count').reset_index().rename(columns={'index': 'Category'})

        # Store the category counts in the dictionary
        speech_type_counts[sheet_name] = category_counts

# Display the data for each sheet
for sheet, data in speech_type_counts.items():
    print(f"Sheet: {sheet}")
    print(data)
    print("\n")

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_new_variables.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Display the first few rows of the DataFrame to see the columns
print("Columns in the dataset:")
print(df.columns)

# Display a subset of the DataFrame, e.g., the first 5 rows
print("\nSample data:")
print(df.head())

# Add an ID column starting from 1
df['ID'] = range(1, len(df) + 1)

# Save the updated DataFrame back to an Excel file
output_file_path = "all_speeches_new_variables_with_id.xlsx"  # Yeni dosya adı
df.to_excel(output_file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with ID column:")
print(df.head())

import pandas as pd

# Load the provided Excel files
file1_path = "all_speeches_new_variables_with_id.xlsx"  # İlk dosya yolu
file2_path = "Combined_Data.xlsx"  # İkinci dosya yolu

# Read the relevant columns from the Excel files into DataFrames
df1 = pd.read_excel(file1_path, usecols=["ID", "Title"])
df2 = pd.read_excel(file2_path, usecols=["ID", "Title"])

# Reset index to ensure the indices are identical
df1 = df1.reset_index(drop=True)
df2 = df2.reset_index(drop=True)

# Compare the DataFrames element-wise and mark differences
differences = df1.ne(df2)
differences_indices = differences.any(axis=1)

# Create a DataFrame to hold the differences
diff_df = pd.DataFrame({
    'File1_ID': df1['ID'],
    'File1_Title': df1['Title'],
    'File2_ID': df2['ID'],
    'File2_Title': df2['Title']
}).loc[differences_indices]

# Display the differences
if not diff_df.empty:
    print("Differences found:")
    print(diff_df)
else:
    print("No differences found.")

import pandas as pd

# Load the provided Excel files
file1_path = "all_speeches_new_variables_with_id.xlsx"  # İlk dosya yolu
file2_path = "Combined_Data.xlsx"  # İkinci dosya yolu

# Read the Excel files into DataFrames
df1 = pd.read_excel(file1_path)
df2 = pd.read_excel(file2_path, usecols=["ID", "Title", "SpeechType"])

# Merge the DataFrames on the 'ID' column, ensuring 'Title' is not duplicated
merged_df = pd.merge(df1, df2, on='ID', how='left', suffixes=('', '_y'))

# Remove the duplicated 'Title' column
merged_df = merged_df.drop(columns=['Title_y'])

# Save the updated DataFrame back to an Excel file
output_file_path = "all_speeches_merged.xlsx"
merged_df.to_excel(output_file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame:")
print(merged_df.head())

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Convert the 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')

# Create new columns for 'MonthYear' and 'Year'
df['MonthYear'] = df['Date'].dt.strftime('%m.%Y')
df['Year'] = df['Date'].dt.year

# Save the updated DataFrame back to the same Excel file
df.to_excel(file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with MonthYear and Year columns:")
print(df.head())

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Calculate the length of each speech in the 'SpeechText' column
df['SpeechLength'] = df['SpeechText'].apply(lambda x: len(str(x)))

# Save the updated DataFrame back to the same Excel file
df.to_excel(file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with SpeechLength column:")
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Group by 'Year' and calculate the average SpeechLength for each year
yearly_avg_speech_length = df.groupby('Year')['SpeechLength'].mean()

# Plot the data
plt.figure(figsize=(10, 6))
plt.plot(yearly_avg_speech_length.index, yearly_avg_speech_length.values, marker='o')
plt.title('Average Speech Length by Year')
plt.xlabel('Year')
plt.ylabel('Average Speech Length (characters)')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Exclude the year 2024
df_filtered = df[df['Year'] != 2024]

# Group by 'Year' and calculate the average SpeechLength for each year
yearly_avg_speech_length = df_filtered.groupby('Year')['SpeechLength'].mean()

# Plot the data
plt.figure(figsize=(10, 6))
plt.plot(yearly_avg_speech_length.index, yearly_avg_speech_length.values, marker='o')
plt.title('Average Speech Length by Year (Excluding 2024)')
plt.xlabel('Year')
plt.ylabel('Average Speech Length (characters)')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Add the file path here

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Exclude rows where SpeechType is "Other"
df_filtered = df[df['SpeechType'] != "Other"]

# Group by 'SpeechType' and calculate the average SpeechLength for each type
speech_type_avg_length = df_filtered.groupby('SpeechType')['SpeechLength'].mean()

# Sort the average speech lengths in descending order
speech_type_avg_length = speech_type_avg_length.sort_values(ascending=False)

# Plot the data
plt.figure(figsize=(12, 8))
speech_type_avg_length.plot(kind='bar')
plt.title('Average Speech Length by Speech Type')
plt.xlabel('Speech Type')
plt.ylabel('Average Speech Length (characters)')
plt.xticks(rotation=45)
plt.grid(True, axis='y')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Add the file path here

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Exclude the year 2024
df_filtered = df[df['Year'] != 2024]

# Exclude rows where SpeechType is "Other"
df_filtered = df_filtered[df_filtered['SpeechType'] != "Other"]

# Group by 'Year' and 'SpeechType' and calculate the average SpeechLength for each group
grouped_data = df_filtered.groupby(['Year', 'SpeechType'])['SpeechLength'].mean().reset_index()

# Pivot the data to have 'Year' as index and 'SpeechType' as columns
pivot_data = grouped_data.pivot(index='Year', columns='SpeechType', values='SpeechLength')

# Plot the data
plt.figure(figsize=(14, 8))
sns.lineplot(data=pivot_data, markers=True, dashes=False)

# Customize the plot for better readability
plt.title('Average Speech Length by Speech Type and Year (Excluding 2024)', fontsize=16)
plt.xlabel('Year', fontsize=14)
plt.ylabel('Average Speech Length (characters)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(title='Speech Type', title_fontsize='13', fontsize='11', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()

# Show the plot
plt.show()

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Define a mapping from SpeechType to the new categories
category_mapping = {
    'Ribbon Cutting': 'Economic',
    'Social Events': 'Social',
    'Civil Society Organization': 'Social',
    'Awards & Graduations': 'Cultural',
    'National Ceremonies': 'Cultural',
    'Academic Events': 'Cultural',
    'Official Speeches': 'Political',
    'Rallies': 'Political',
    'Crisis Speeches': 'Political',
    'International Speeches': 'International',
    'Other': 'Other'
}

# Map the SpeechType to the new Category
df['Category'] = df['SpeechType'].map(category_mapping)

# Save the updated DataFrame back to the same Excel file
df.to_excel(file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with Category column:")
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Add the file path here

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Exclude rows where SpeechType is "Other"
df_filtered = df[df['SpeechType'] != "Other"]

# Group by 'Category' and calculate the average SpeechLength for each category
category_avg_length = df_filtered.groupby('Category')['SpeechLength'].mean().sort_values()

# Plot the data
plt.figure(figsize=(12, 8))
sns.barplot(x=category_avg_length.index, y=category_avg_length.values, palette="viridis")
plt.title('Average Speech Length by Category', fontsize=16)
plt.xlabel('Category', fontsize=14)
plt.ylabel('Average Speech Length (characters)', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Add the file path here

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Exclude rows where SpeechType is "Other"
df_filtered = df[df['SpeechType'] != "Other"]

# Group by 'Year' and 'Category' and calculate the average SpeechLength for each group
grouped_data = df_filtered.groupby(['Year', 'Category'])['SpeechLength'].mean().reset_index()

# Pivot the data to have 'Year' as index and 'Category' as columns
pivot_data = grouped_data.pivot(index='Year', columns='Category', values='SpeechLength')

# Plot the data
plt.figure(figsize=(14, 8))
sns.lineplot(data=pivot_data, markers=True, dashes=False)

# Customize the plot for better readability
plt.title('Average Speech Length by Category and Year', fontsize=16)
plt.xlabel('Year', fontsize=14)
plt.ylabel('Average Speech Length (characters)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(title='Category', title_fontsize='13', fontsize='11', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()

# Show the plot
plt.show()

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)
print(df.head())

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_merged.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Define a function to split the SpeechText into paragraphs
def split_paragraphs(row):
    paragraphs = row['SpeechText'].split('\n\n\n')
    return [{'Paragraph': para, **row} for para in paragraphs]

# Apply the function to each row and explode the list of paragraphs into separate rows
paragraphs_expanded = df.apply(split_paragraphs, axis=1).explode()

# Create a new DataFrame from the exploded paragraphs
expanded_df = pd.DataFrame(list(paragraphs_expanded))

# Calculate word count for each paragraph
expanded_df['WordCount'] = expanded_df['Paragraph'].apply(lambda x: len(str(x).split()))

# Save the updated DataFrame to a new Excel file
output_file_path = "all_speeches_paragraphs_with_wordcount.xlsx"
expanded_df.to_excel(output_file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with Paragraph and WordCount columns:")
print(expanded_df.head())

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_paragraphs_with_wordcount.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Count the number of non-null entries in the 'Paragraph' column
paragraph_count = df['Paragraph'].count()

# Display the count
print(f"Number of entries in the 'Paragraph' column: {paragraph_count}")

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_paragraphs_with_wordcount.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Calculate statistical values for the 'WordCount' column
max_value = df['WordCount'].max()
min_value = df['WordCount'].min()
mode_value = df['WordCount'].mode()[0]  # mode() returns a Series, we take the first value
median_value = df['WordCount'].median()
mean_value = df['WordCount'].mean()

# Print the calculated values
print(f"Max WordCount: {max_value}")
print(f"Min WordCount: {min_value}")
print(f"Mode WordCount: {mode_value}")
print(f"Median WordCount: {median_value}")
print(f"Mean WordCount: {mean_value}")

import pandas as pd

# Load the provided Excel file
file_path = "all_speeches_paragraphs_with_wordcount.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Check initial number of rows
initial_row_count = df.shape[0]
print(f"Initial number of rows: {initial_row_count}")

# Calculate and display statistical values for the 'WordCount' column before filtering
max_value_before = df['WordCount'].max()
min_value_before = df['WordCount'].min()
mode_value_before = df['WordCount'].mode()[0]
median_value_before = df['WordCount'].median()
mean_value_before = df['WordCount'].mean()

print(f"Before filtering - Max WordCount: {max_value_before}")
print(f"Before filtering - Min WordCount: {min_value_before}")
print(f"Before filtering - Mode WordCount: {mode_value_before}")
print(f"Before filtering - Median WordCount: {median_value_before}")
print(f"Before filtering - Mean WordCount: {mean_value_before}")

# Remove paragraphs with WordCount less than 40
df_filtered = df[df['WordCount'] >= 40]

# Check the number of rows after filtering
filtered_row_count = df_filtered.shape[0]
print(f"Number of rows after filtering: {filtered_row_count}")

# Calculate and display statistical values for the 'WordCount' column after filtering
max_value_after = df_filtered['WordCount'].max()
min_value_after = df_filtered['WordCount'].min()
mode_value_after = df_filtered['WordCount'].mode()[0]
median_value_after = df_filtered['WordCount'].median()
mean_value_after = df_filtered['WordCount'].mean()

print(f"After filtering - Max WordCount: {max_value_after}")
print(f"After filtering - Min WordCount: {min_value_after}")
print(f"After filtering - Mode WordCount: {mode_value_after}")
print(f"After filtering - Median WordCount: {median_value_after}")
print(f"After filtering - Mean WordCount: {mean_value_after}")

# Ensure that filtering worked
if filtered_row_count < initial_row_count:
    print("Filtering was successful.")
else:
    print("Filtering did not change the number of rows.")

# Save the updated DataFrame back to a new Excel file
output_file_path = "filtered_speeches_paragraphs_with_wordcount.xlsx"
df_filtered.to_excel(output_file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with filtered paragraphs:")
print(df_filtered.head())

pip install nltk

import pandas as pd
import nltk
nltk.download('punkt')
from nltk.tokenize import sent_tokenize

# Load the provided Excel file
file_path = "filtered_speeches_paragraphs_with_wordcount.xlsx"  # Dosya yolunu buraya ekleyin

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path)

# Function to split text into sentences using nltk
def split_into_sentences(text):
    return sent_tokenize(text)

# Function to standardize paragraphs to have maximum 5 sentences
def standardize_paragraphs(paragraph, max_sentences=5):
    sentences = split_into_sentences(paragraph)
    new_paragraphs = []
    current_paragraph = []
    current_sentence_count = 0

    for sentence in sentences:
        if current_sentence_count < max_sentences:
            current_paragraph.append(sentence)
            current_sentence_count += 1
        else:
            new_paragraphs.append((current_paragraph, current_sentence_count))
            current_paragraph = [sentence]
            current_sentence_count = 1

    if current_paragraph:
        new_paragraphs.append((current_paragraph, current_sentence_count))

    return new_paragraphs

# Apply the function to each paragraph and create a new DataFrame
new_data = []

for idx, row in df.iterrows():
    paragraphs = standardize_paragraphs(row['Paragraph'])
    for paragraph, sentence_count in paragraphs:
        paragraph_text = " ".join(paragraph)
        new_data.append({
            'Date': row['Date'],
            'Title': row['Title'],
            'SpeechType': row['SpeechType'],
            'Paragraph': paragraph_text,
            'SentenceCount': sentence_count,
            'ID': row['ID'],
            'MonthYear': row['MonthYear'],
            'Year': row['Year'],
            'SpeechLength': row['SpeechLength'],
            'Category': row['Category']
        })

# Create a new DataFrame from the new_data list
standardized_df = pd.DataFrame(new_data)

# Save the new DataFrame to a new Excel file
output_file_path = "standardized_speeches_paragraphs_with_sentencecount.xlsx"
standardized_df.to_excel(output_file_path, index=False)

# Display the first few rows of the updated DataFrame to verify
print("Updated DataFrame with standardized paragraphs:")
print(standardized_df.head())

# Check statistical values for the 'SentenceCount' column
max_value = standardized_df['SentenceCount'].max()
min_value = standardized_df['SentenceCount'].min()
mode_value = standardized_df['SentenceCount'].mode()[0]
median_value = standardized_df['SentenceCount'].median()
mean_value = standardized_df['SentenceCount'].mean()

print(f"Max SentenceCount: {max_value}")
print(f"Min SentenceCount: {min_value}")
print(f"Mode SentenceCount: {mode_value}")
print(f"Median SentenceCount: {median_value}")
print(f"Mean SentenceCount: {mean_value}")